/*
    Copyright (C) 2004 Matthew Strait <quadong@users.sf.net>

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

*/

#ifdef HAVE_CONFIG_H
#  include <config.h>
#endif

#include <gtk/gtk.h>
#include <stdio.h>
#include <signal.h>
#include <sys/wait.h>
#include <sys/types.h>
#include <stdlib.h>
#include <fcntl.h>
#include <ctype.h>
#include <unistd.h>
#include <sys/resource.h>
#include <sys/wait.h>
#include <sys/stat.h>

#include "callbacks.h"
#include "interface.h"
#include "support.h"


GtkWidget *fs, *help, *about, *error, *nferror, *spinbutton3 = NULL, *statusbar1 = NULL;
static int pid = 0, track = 1;
static int channels[7] = { 0xdeadbeef, 1, 1, 1, 1, 1, 1 };
gchar * filename = NULL, * oldfilename = NULL;

static enum { doforever, doseconds, doreps } mode = doforever;
static int seconds = 60, reps = 2;

static int writingpipe[2], readingpipe[2];

static int starttime;
static int numtracks;
static double speed = 1;

static int idleid;

void dostatusbar(char * info)
{
	static char myinfo[81] = "\0";
	
	if(strcmp(myinfo, info) && statusbar1){
		char p[80];
		char * tmp = strrchr(filename, '/');
		tmp++;

		snprintf(p, 79, "%s (%d songs):%s", tmp, numtracks, info);
	

		gtk_statusbar_pop(GTK_STATUSBAR(statusbar1), 0);
		gtk_statusbar_push(GTK_STATUSBAR(statusbar1), 0, p);
	}

	strncpy(myinfo, info, 80);
}

int idleloop()
{
	static int field = 0;	
	static int pos = 0;
	static int ready = 0;
	char buf[80];
	static char tempinfo[81] = "\0";
	static char info[81] = "\0";
	int count;

	//fcntl(readingpipe[0], F_SETFL, O_NONBLOCK);

	if(count = read(readingpipe[0], &buf, 80))
        {
		int i;
		for(i = 0; i < count; i++)
		{
			if(buf[i] == ','){
				field++;
			}else if(buf[i] == '\r'){
				tempinfo[pos] = '\0';
				field = 0;
				pos = 0;
	
				if(strlen(tempinfo) > 4) /* at least "1 sec" */
					strcpy(info, tempinfo);

				dostatusbar(info);
			}
			else if(field == 2 && pos < 80){
				tempinfo[pos] = buf[i];
				pos++;
			}
		}
	}
        return 1;
}

void killnosefarts()
{
	int status;
	kill(pid, 9);
	system("killall -9 nosefart > /dev/null"); /* hack, fix */
	wait(&status);
}

void cleanup()
{
	killnosefarts();
	system("stty sane; echo");
}

void sfexit()
{
	fprintf(stderr, "Segmentation fault.  Send a bug report to quadong@users.sf.net\n");
	cleanup();
	exit(1);
}

void otherexit()
{
	cleanup();
	exit(1);
}

char * itoa(int n)
{
        char * s = malloc(4);

        if(n > 999)
                abort();
        s[0] = n/100 + '0';
        s[1] = (n/10)%10 + '0';
        s[2] = n%10 + '0';
        s[3] = 0;

        return s;
}

void settrackmax()
{
	if(spinbutton3)
	{
		GtkObject * sba = gtk_adjustment_new( 1, 1, numtracks, 1, 5, 0 );
		gtk_spin_button_configure( GTK_SPIN_BUTTON(spinbutton3), 
			GTK_ADJUSTMENT(sba), 1, 0 );
		gtk_spin_button_set_wrap(  GTK_SPIN_BUTTON(spinbutton3), 1);
	}
}	

void incrementtrack()
{
	track++;
	if(track > numtracks) track = 1;
	if(spinbutton3) gtk_spin_button_set_value(GTK_SPIN_BUTTON(spinbutton3), track);
}

/* SLOOOOOOOW.... (and terrible....) */
void getnumtracksandhandleit()
{
	FILE * tempfile;
	char tempfn[255];
	char cmd[255];

	strcpy(tempfn, "/tmp/nosefart.XXXXXX");
	mkstemp(tempfn);

	snprintf(cmd, 254, "nosefart -i %s | grep Number | cut -d: -f2 > %s", 
		filename, tempfn);
	system(cmd);

	tempfile = fopen(tempfn, "r");

	fscanf(tempfile, " %d", &numtracks);

	fclose(tempfile);

	unlink(tempfn);

	settrackmax();
}

/* checks for existance and for NSFness */
int fileisgood(char * filename)
{
	gchar cmd[255];
	struct stat scratchstat;

	if(-1 == stat(filename, &scratchstat))
		return 0;
	snprintf(cmd, 254, "nosefart -i %s", filename);
	if(system(cmd))
		return 0;
	return 1;
}

void play(gchar * filename)
{
        char * t = itoa(track);
	char * s = itoa(seconds);
	char * r = itoa(reps);
	int mypid = 0;

	if(!fileisgood(filename))
	{
		filename = NULL;
		if(!error) error = create_error_window();
		gtk_widget_show(error);
		return;
	}

	if(pipe(writingpipe) == -1) fprintf(stderr, "writing pipe creation failed!\n");
	if(pipe(readingpipe) == -1) fprintf(stderr, "reading pipe creation failed!\n");

        if(pid)	killnosefarts();

        pid = fork();

        if(!pid)
	{
		char * args[] = { "nosefart", "-t", t, filename,  
				NULL, NULL, NULL, NULL, NULL, NULL, /* channels */
				NULL, NULL, /* play length */
				NULL, NULL, /* speed */
				NULL /* ending NULL */ };
		int argp = 4; /* next available arg */

		int i;
		for(i = 1; i <= 6; i++)
		{
			if(!channels[i])
			{
				char * newarg = malloc(3);
				snprintf(newarg, 3, "-%d", i);
				args[argp] = newarg;
				argp++;
			}
		}

		{
			char num[32];
			snprintf(num, 31, "%f", speed);

			args[argp] = "-s";
			argp++;
			args[argp] = num;
			argp++;
		}

		close(0);
	        if(dup(writingpipe[0]) == -1) fprintf(stderr, "Trouble with dup to stdin\n" );
		close(writingpipe[1]);

		close(1);
	        if(dup(readingpipe[1]) == -1) fprintf(stderr, "Trouble with dup to stdin\n" );
		close(readingpipe[0]);

		if(mode == doforever)
		{}
		else if(mode == doseconds)
		{
			args[argp] = "-l";
			argp++;
			args[argp] = s;

		}
		else if(mode == doreps)
		{
			args[argp] = "-a";
			argp++;
			args[argp] = r;
		}
	
                execvp("nosefart", args);

		/* this should only be possible if nosefart was deleted 
		between when gnosefart was started and now... */
		fprintf(stderr, "NOT REACHED.  Nosefart not found!\n");
		exit(1);
	}
	/* else */

	idleid = gtk_idle_add( idleloop, NULL ); /* reads from nosefart's stdout */

	free(t); 
	free(s); 
	free(r);

}



int wakeupandplay()
{
	if(filename)
	{
		int status;
		if(waitpid(pid, &status, WNOHANG))
		{
			incrementtrack();
			play(filename);
		}
	}
	return 1;
}


void
close_gnosefart                        (GtkObject       *object,
                                        gpointer         user_data)
{
	cleanup();
        gtk_main_quit();
}


void
track_spinbutton_changed               (GtkEditable     *editable,
                                        gpointer         user_data)
{
        int newtrack = gtk_spin_button_get_value_as_int(GTK_SPIN_BUTTON(editable));
	if(newtrack == track) return; /* this function gets called twice
					everytime the spinbutton is changed.  Dunno why... */
	track = newtrack;
	if(filename) 
		play(filename);
}


void
forever_toggled                        (GtkToggleButton *togglebutton,
                                        gpointer         user_data)
{
	if(mode != doforever) mode = doforever;
}


void
seconds_toggled                        (GtkToggleButton *togglebutton,
                                        gpointer         user_data)
{
	if(mode != doseconds) mode = doseconds;
}


void
repetitions_toggled                    (GtkToggleButton *togglebutton,
                                        gpointer         user_data)
{
	if(mode != doreps) mode = doreps;
}


void
seconds_spinbutton_changed             (GtkEditable     *editable,
                                        gpointer         user_data)
{
        seconds = gtk_spin_button_get_value_as_int(GTK_SPIN_BUTTON(editable));
}


void
repetitions_spinbutton_changed         (GtkEditable     *editable,
                                        gpointer         user_data)
{
        reps = gtk_spin_button_get_value_as_int(GTK_SPIN_BUTTON(editable));
}


void channel1_toggled (GtkToggleButton *togglebutton, gpointer         user_data)
{
	write(writingpipe[1], "1", 1);
	channels[1] = !channels[1];
}


void channel2_toggled (GtkToggleButton *togglebutton, gpointer         user_data)
{
	write(writingpipe[1], "2", 1);
	channels[2] = !channels[2];
}


void channel3_toggled (GtkToggleButton *togglebutton, gpointer         user_data)
{
	write(writingpipe[1], "3", 1);
	channels[3] = !channels[3];
}


void channel4_toggled (GtkToggleButton *togglebutton, gpointer         user_data)
{
	write(writingpipe[1], "4", 1);
	channels[4] = !channels[4];
}


void channel5_toggled (GtkToggleButton *togglebutton, gpointer         user_data)
{
	write(writingpipe[1], "5", 1);
	channels[5] = !channels[5];
}


void channel6_toggled (GtkToggleButton *togglebutton, gpointer         user_data)
{
	write(writingpipe[1], "6", 1);
	channels[6] = !channels[6];
}



void
open_pushed                            (GtkButton       *button,
                                        gpointer         user_data)
{
      fs = create_fileselection();
      gtk_widget_show(fs);
}

void
help_pushed                            (GtkButton       *button,
                                        gpointer         user_data)
{
      help = create_dialog2();
      gtk_widget_show(help);
}


/* bleah.  Can't see to get double clicking a filename to work at the same
time as having the cancel button work right... */
void
on_fileselection_response              (GtkWindow       *window,
                                        gpointer         user_data)
{

        filename = (gchar *)gtk_file_selection_get_filename(GTK_FILE_SELECTION(fs));
	if(oldfilename) free(oldfilename);
	oldfilename = malloc(strlen(filename) + 1);
	strcpy(oldfilename, filename);


	if(fs) gtk_widget_hide(fs);
        play(filename);
	getnumtracksandhandleit();
}


void on_ok_button1_released (GtkButton *button, gpointer         user_data)
{
        filename = (gchar *)gtk_file_selection_get_filename(GTK_FILE_SELECTION(fs));
	oldfilename = malloc(strlen(filename) + 1);
	strcpy(oldfilename, filename);


	if(!fileisgood(filename))
	{
		filename = NULL;
		if(!error) error = create_error_window();
		gtk_widget_show(error);
		return;
	}	

	gtk_widget_hide(fs);
        play(filename);
	getnumtracksandhandleit();
}


void
on_cancel_button1_pressed              (GtkButton       *button,
                                        gpointer         user_data)
{
	fprintf(stderr, "cancel\n");
        if(!fs) fprintf(stderr, "ASSERTION fs != NULL failed!\n");
        gtk_widget_hide(fs);
}


void
ok_released_in_help                    (GtkButton       *button,
                                        gpointer         user_data)
{
      if(!help) help = create_dialog2();
      gtk_widget_hide(help);
}


void
close_pushed                           (GtkButton       *button,
                                        gpointer         user_data)
{
	filename = NULL;
        if(pid)
		killnosefarts();

	gtk_idle_remove(idleid);

	track = 1;
        if(spinbutton3) gtk_spin_button_set_value(GTK_SPIN_BUTTON(spinbutton3), track);

	gtk_statusbar_pop(GTK_STATUSBAR(statusbar1), 0);
	gtk_statusbar_push(GTK_STATUSBAR(statusbar1), 0, "No file open");
}


void
closebutton_pushed_in_error_window     (GtkButton       *button,
                                        gpointer         user_data)
{
	//if(!error) error = create_error_window();
	gtk_widget_hide(error);	
}


void
closebutton_pushed_in_nnf_error_window (GtkButton       *button,
                                        gpointer         user_data)
{
	//if(!nferror) nferror = create_nonosefart_error();
	gtk_widget_hide(nferror);	
	gtk_main_quit();
}

void
spinbutton3_map                        (GtkWidget       *widget,
                                        gpointer         user_data)
{
	spinbutton3 = widget;
}


void
statusbar1_map                         (GtkWidget       *widget,
                                        gpointer         user_data)
{
	statusbar1 = widget;
	gtk_statusbar_set_has_resize_grip( GTK_STATUSBAR(statusbar1), 0 );	
}


void
about_button_pushed                    (GtkButton       *button,
                                        gpointer         user_data)
{
      about = create_about_dialog();
      gtk_widget_show(about);
}


void
ok_released_in_about                   (GtkButton       *button,
                                        gpointer         user_data)
{
      //if(!about) about = create_about_dialog();
      gtk_widget_hide(about);
}


void
on_fileselection_map                   (GtkWidget       *widget,
                                        gpointer         user_data)
{
	if(oldfilename) 
		gtk_file_selection_set_filename (GTK_FILE_SELECTION(widget), oldfilename);
}

void
spinbutton_mult_changed                (GtkEditable     *editable,
                                        gpointer         user_data)
{
        speed = gtk_spin_button_get_value_as_float(GTK_SPIN_BUTTON(editable));
}



void
on_dialog2_close                       (GtkDialog       *dialog,
                                        gpointer         user_data)
{
	//if(!help) help = dialog;
	gtk_widget_hide(help);
}


void
on_dialog2_destroy                     (GtkObject       *object,
                                        gpointer         user_data)
{
	fprintf(stderr, "Hello 1\n");
	gtk_widget_hide(help);
	fprintf(stderr, "Hello 2\n");
}

